generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  analyses  ProductAnalysis[]
}

model Keyword {
  id           String           @id @default(uuid())
  term         String
  searchVolume Int
  trend        String          // 'up' | 'down'
  platform     String          // 'shopee' | 'lazada' | 'tiktok'
  category     String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  products     ProductAnalysis[]
}

model ProductAnalysis {
  id          String         @id @default(uuid())
  url         String
  title       String?        // Optional now as it will be filled after analysis
  description String?
  price       Float?         // Optional now as it will be filled after analysis
  category    String?
  platform    String        // 'shopee' | 'lazada' | 'tiktok'
  status      String        // 'pending' | 'processing' | 'completed' | 'failed'
  error       String?       // Store error message if analysis fails
  userId      String?       // Make userId optional
  user        User?         @relation(fields: [userId], references: [id])  // Make relation optional
  keywords    Keyword[]
  competitors CompetitorData[]
  report      AnalysisReport?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  startedAt   DateTime?      // When analysis started
  completedAt DateTime?      // When analysis completed
}

model CompetitorData {
  id              String         @id @default(uuid())
  url             String
  title           String
  shop            String
  price           Float
  sales           Int
  revenue         Float
  rating          Float?
  platform        String        // 'shopee' | 'lazada' | 'tiktok'
  image           String?
  productAnalysis ProductAnalysis @relation(fields: [analysisId], references: [id])
  analysisId      String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model AnalysisReport {
  id                String         @id @default(uuid())
  productAnalysis   ProductAnalysis @relation(fields: [analysisId], references: [id])
  analysisId        String         @unique
  keywordSuggestions Json          // Suggested keywords with scores
  pricingInsights   Json          // Pricing recommendations
  contentSuggestions Json          // Content improvement suggestions
  seoRecommendations Json         // SEO optimization tips
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// For trending keywords on homepage
model TrendingKeyword {
  id           String   @id @default(uuid())
  term         String
  searchVolume Int
  trend        String   // 'up' | 'down'
  platform     String   // 'shopee' | 'lazada' | 'tiktok'
  rank         Int      // Position in trending list
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([platform, rank])
}

// For top selling products on homepage
model TopProduct {
  id       String   @id @default(uuid())
  title    String
  shop     String
  platform String   // 'shopee' | 'lazada' | 'tiktok'
  price    Float
  sales    Int
  revenue  Float
  image    String?
  url      String
  rank     Int      // Position in top products list
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([platform, rank])
} 